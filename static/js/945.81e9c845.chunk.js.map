{"version":3,"file":"static/js/945.81e9c845.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","js/util/util.js","js/util/dom-events.js","js/util/viewport-size.js","js/slide/pan-bounds.js","js/slide/zoom-level.js","js/slide/slide.js","js/gestures/drag-handler.js","js/gestures/zoom-handler.js","js/gestures/tap-handler.js","js/gestures/gestures.js","js/main-scroll.js","js/keyboard.js","js/util/css-animation.js","js/util/spring-easer.js","js/util/spring-animation.js","js/util/animations.js","js/scroll-wheel.js","js/ui/ui-element.js","js/ui/button-arrow.js","js/ui/button-close.js","js/ui/button-zoom.js","js/ui/loading-indicator.js","js/ui/counter-indicator.js","js/ui/ui.js","js/core/eventable.js","js/slide/placeholder.js","js/slide/content.js","js/slide/loader.js","js/core/base.js","js/opener.js","js/photoswipe.js","js/slide/get-thumb-bounds.js"],"sourcesContent":["import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nexport default function _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nexport function specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n","// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  /* @ts-ignore */\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","import { clamp } from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {Record<Axis, number>} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n    this.currZoomLevel = 1;\r\n    this.center = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.max = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.min = /** @type {Point} */ { x: 0, y: 0 };\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By default, it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @typedef {_SlideData & Record<string, any>} SlideData\r\n * @typedef {Object} _SlideData\r\n * @prop {HTMLElement} [element] thumbnail element\r\n * @prop {string} [src] image URL\r\n * @prop {string} [srcset] image srcset\r\n * @prop {number} [w] image width (deprecated)\r\n * @prop {number} [h] image height (deprecated)\r\n * @prop {number} [width] image width\r\n * @prop {number} [height] image height\r\n * @prop {string} [msrc] placeholder image URL that's displayed before large image is loaded\r\n * @prop {string} [alt] image alt text\r\n * @prop {boolean} [thumbCropped] whether thumbnail is cropped client-side or not\r\n * @prop {string} [html] html content of a slide\r\n * @prop {'image' | 'html' | string} [type] slide type\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.pan = { x: 0, y: 0 };\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap', 'div');\r\n    /** @type {HTMLElement | null} */\r\n    this.holderElement = null;\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n    this.heavyAppended = false;\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load(false);\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */\r\n  getPlaceholderElement() {\r\n    return this.content.placeholder?.element;\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    if (!prevZoomLevel) {\r\n      prevZoomLevel = this.zoomLevels.initial;\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */\r\n  isPannable() {\r\n    return Boolean(this.width) && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */\r\n  isZoomable() {\r\n    return Boolean(this.width) && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  /** @returns {string} */\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n","import {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = { x: 0, y: 0 };\r\n  }\r\n\r\n  start() {\r\n    if (this.pswp.currSlide) {\r\n      equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    }\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && this.pswp.options.closeOnVerticalDrag\r\n        && (currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit)\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!this.pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        this.pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        if (currSlide) {\r\n          roundPoint(currSlide.pan);\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { velocity } = this.gestures;\r\n    const { mainScroll, currSlide } = this.pswp;\r\n    let indexDiff = 0;\r\n\r\n    this.pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is visible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / this.pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched,\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if ((currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max)\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { velocity } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (this.pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Increasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        this.pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = this.pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    this.pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          this.pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = this.pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta || !currSlide) {\r\n      return false;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (this.pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - (this.pswp.currSlide?.bounds.center.y ?? 0)) / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n","import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startPan = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startZoomPoint = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._zoomPoint = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._wasOverFitZoomLevel = false;\r\n    /** @private */\r\n    this._startZoomLevel = 1;\r\n  }\r\n\r\n  start() {\r\n    const { currSlide } = this.gestures.pswp;\r\n    if (currSlide) {\r\n      this._startZoomLevel = currSlide.currZoomLevel;\r\n      equalizePoints(this._startPan, currSlide.pan);\r\n    }\r\n\r\n    this.gestures.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial)\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide?.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === 0) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({ x: 0, y: 0 }, currSlide.pan);\r\n    let destinationPan = equalizePoints({ x: 0, y: 0 }, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    const panNeedsChange = !pointsEqual(destinationPan, initialPan);\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n","/**\r\n * @template {string} T\r\n * @template {string} P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide?.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide?.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element?.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n","import {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y' | null} */\r\n    this.dragAxis = null;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = { x: 0, y: 0 }; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = { x: 0, y: 0 }; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.prevP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.velocity = { x: 0, y: 0 };\r\n\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._lastStartP1 = { x: 0, y: 0 };\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._intervalP1 = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]}\r\n     * @private\r\n     */\r\n    this._ongoingPointers = [];\r\n    /** @private */\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    /** @private */\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @private */\r\n    this._intervalTime = 0;\r\n    /** @private */\r\n    this._velocityCalculated = false;\r\n    this.isMultitouch = false;\r\n    this.isDragging = false;\r\n    this.isZooming = false;\r\n    /** @type {number | null} */\r\n    this.raf = null;\r\n    /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */\r\n    this._tapTimer = null;\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(\r\n        pswp.scrollWrap,\r\n        'click',\r\n        /** @type EventListener */(this._onClick.bind(this))\r\n      );\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        if (pswp.scrollWrap) {\r\n          pswp.scrollWrap.ontouchmove = () => {};\r\n          pswp.scrollWrap.ontouchend = () => {};\r\n        }\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(\r\n      pswp.scrollWrap,\r\n      pref + down,\r\n      /** @type EventListener */(this.onPointerDown.bind(this))\r\n    );\r\n    events.add(window, pref + 'move', /** @type EventListener */(this.onPointerMove.bind(this)));\r\n    events.add(window, pref + up, /** @type EventListener */(this.onPointerUp.bind(this)));\r\n    if (cancelEvent) {\r\n      events.add(\r\n        pswp.scrollWrap,\r\n        cancelEvent,\r\n        /** @type EventListener */(this.onPointerUp.bind(this))\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    const isMousePointer = e.type === 'mousedown' || e.pointerType === 'mouse';\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e, 'down');\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    this._preventPointerEventBehaviour(e, 'move');\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _preventPointerEventBehaviour(e, pointerType) {\r\n    const preventPointerEvent = this.pswp.applyFilters('preventPointerEvent', true, e, pointerType);\r\n    if (preventPointerEvent) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPointer) => {\r\n        return ongoingPointer.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, { x: 0, y: 0 }));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** update points that were used during previous rAF tick\r\n   * @private\r\n   */\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  /** update points at the start of gesture\r\n   * @private\r\n   */\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  /** @private */\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n","import {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n    this.slideWidth = 0;\r\n    /** @private */\r\n    this._currPositionIndex = 0;\r\n    /** @private */\r\n    this._prevPositionIndex = 0;\r\n    /** @private */\r\n    this._containerShiftIndex = -1;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = [];\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', 'div', this.pswp.container);\r\n      el.setAttribute('role', 'group');\r\n      el.setAttribute('aria-roledescription', 'slide');\r\n      el.setAttribute('aria-hidden', 'true');\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    return Boolean(diff);\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    /** @type {ItemHolder | undefined} */\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        if (tempHolder) {\r\n          this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n          this._containerShiftIndex++;\r\n\r\n          setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n        }\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        if (tempHolder) {\r\n          this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n          this._containerShiftIndex--;\r\n\r\n          setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1]?.slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */\r\n  moveTo(x, dragging) {\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      let newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      const delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n\r\n    if (this.pswp.container) {\r\n      setTransform(this.pswp.container, x);\r\n    }\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging: dragging ?? false });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n","import { specialKeyUsed } from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\nconst KeyboardKeyCodesMap = {\r\n  Escape: 27,\r\n  z: 90,\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n  Tab: 9,\r\n};\r\n\r\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */\r\nconst getKeyboardEventKey = (key, isKeySupported) => {\r\n  return isKeySupported ? key : KeyboardKeyCodesMap[key];\r\n};\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    /** @private */\r\n    this._wasFocused = false;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      if (pswp.options.trapFocus) {\r\n        // Dialog was likely opened by keyboard if initial point is not defined\r\n        if (!pswp.options.initialPointerPos) {\r\n          // focus causes layout,\r\n          // which causes lag during the animation,\r\n          // that's why we delay it until the opener transition ends\r\n          this._focusRoot();\r\n        }\r\n\r\n        pswp.events.add(\r\n          document,\r\n          'focusin',\r\n          /** @type EventListener */(this._onFocusIn.bind(this))\r\n        );\r\n      }\r\n\r\n      pswp.events.add(document, 'keydown', /** @type EventListener */(this._onKeyDown.bind(this)));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** @private */\r\n  _focusRoot() {\r\n    if (!this._wasFocused && this.pswp.element) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe> | undefined} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y' | undefined} */\r\n    let axis;\r\n    let isForward = false;\r\n    const isKeySupported = 'key' in e;\r\n\r\n    switch (isKeySupported ? e.key : e.keyCode) {\r\n      case getKeyboardEventKey('Escape', isKeySupported):\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case getKeyboardEventKey('z', isKeySupported):\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case getKeyboardEventKey('ArrowLeft', isKeySupported):\r\n        axis = 'x';\r\n        break;\r\n      case getKeyboardEventKey('ArrowUp', isKeySupported):\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('ArrowRight', isKeySupported):\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case getKeyboardEventKey('ArrowDown', isKeySupported):\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('Tab', isKeySupported):\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      // @ts-ignore\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (template\r\n        && document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","import { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish = () => {},\r\n      duration = 333,\r\n      easing = DEFAULT_EASING,\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop] ?? '';\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n    /** @private */\r\n    this._finished = false;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transition won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element property was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n","const DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    this._dampedFrequency = this._naturalFrequency;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n","import SpringEaser from './spring-easer.js';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    this._raf = 0;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish = () => {},\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = 0;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n","import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */\r\n/** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */\r\n\r\n/** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n/** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */\r\n  _start(props, isSpring) {\r\n    const animation = isSpring\r\n      ? new SpringAnimation(/** @type SpringAnimationProps */ (props))\r\n      : new CSSAnimation(/** @type CssAnimationProps */ (props));\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n","/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', /** @type EventListener */(this._onWheel.bind(this)));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n","import { createElement } from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    /** @type {HTMLElement} */\r\n    const element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      const ariaText = ariaLabel || title;\r\n      if (ariaText) {\r\n        element.setAttribute('aria-label', ariaText);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          // @ts-ignore\r\n          pswp[data.onClick]();\r\n        } else if (typeof data.onClick === 'function') {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    /** @type {HTMLElement | undefined} root element by default */\r\n    let container = pswp.element;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      }\r\n    }\r\n\r\n    container?.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n","/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  // TODO: this should point to a unique id for this instance\r\n  element.setAttribute('aria-controls', 'pswp__items');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean | undefined} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout | null} */\r\n    let delayTimeout = null;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList.toggle('pswp__preloader--' + className, add);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide?.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(Boolean(pswp.currSlide?.content.isLoading()));\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    if (pswp.ui) {\r\n      pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n    }\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n","import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList.toggle('pswp--zoomed-in', isZoomedIn);\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [];\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = () => {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element?.classList.toggle('pswp--one-slide', pswp.getNumItems() === 1);\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n\r\n    if (this.pswp.opener.isClosing || !template || !currSlide) {\r\n      return;\r\n    }\r\n\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import Eventable from './eventable.js';\r\nimport { getElementsFromOption } from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this.isOpen = false;\r\n    this.isClosing = false;\r\n    this.isOpening = false;\r\n    /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */\r\n    this._duration = undefined;\r\n    /** @private */\r\n    this._useAnimation = false;\r\n    /** @private */\r\n    this._croppedZoom = false;\r\n    /** @private */\r\n    this._animateRootOpacity = false;\r\n    /** @private */\r\n    this._animateBgOpacity = false;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */\r\n    this._placeholder = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._opacityElement = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._cropContainer1 = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */\r\n    this._cropContainer2 = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */\r\n    this._thumbBounds = undefined;\r\n\r\n\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n  }\r\n\r\n  /** @private */\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = undefined;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = undefined;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide?.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = Boolean(this._duration && this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && slide?.content.usePlaceholder()\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening && slide) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity ?? false;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide?.holderElement;\r\n\r\n      if (pswp.container) {\r\n        pswp.container.style.overflow = 'hidden';\r\n        pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n      }\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity && pswp.bg) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = '1';\r\n        }\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      if (pswp.mainScroll.itemHolders[0]) {\r\n        pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      }\r\n      if (pswp.mainScroll.itemHolders[2]) {\r\n        pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n      }\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve(true);\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve(true);\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _initiate() {\r\n    this.pswp.element?.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element?.classList.toggle('pswp--ui-visible', this.isOpening);\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom && pswp.container) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide?.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      if (pswp.currSlide) {\r\n        pswp.currSlide.zoomAndPanToInitial();\r\n        this._animateTo(\r\n          pswp.currSlide.container,\r\n          'transform',\r\n          pswp.currSlide.getCurrentTransform()\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this._animateBgOpacity && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    // do not animate opacity if it's already at 0\r\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    if (currSlide) {\r\n      equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n      currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n      if (animate) {\r\n        this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n      } else {\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n","import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x: number; y: number; id?: string | number }} Point */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */\r\n/**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} trapFocus\r\n * Trap focus within PhotoSwipe element while it's open.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PreparedPhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  trapFocus: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.options = this._prepareOptions(options || {});\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.offset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * @type {Point}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.viewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     */\r\n    this.bgOpacity = 1;\r\n    this.currIndex = 0;\r\n    this.potentialIndex = 0;\r\n    this.isOpen = false;\r\n    this.isDestroying = false;\r\n    this.hasMouse = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */\r\n    this._initialItemData = {};\r\n    /** @type {Bounds | undefined} */\r\n    this._initialThumbBounds = undefined;\r\n\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.topBar = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.template = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.container = undefined;\r\n    /** @type {HTMLElement | undefined} */\r\n    this.scrollWrap = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.currSlide = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n    this.animations = new Animations();\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  /** @returns {boolean} */\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return false;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    if (this.element) {\r\n      this.element.className += ' ' + rootClasses;\r\n    }\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      const { itemHolders } = this.mainScroll;\r\n\r\n      // Add content to the previous and next slide\r\n      if (itemHolders[0]) {\r\n        itemHolders[0].el.style.display = 'block';\r\n        this.setContent(itemHolders[0], this.currIndex - 1);\r\n      }\r\n      if (itemHolders[2]) {\r\n        itemHolders[2].el.style.display = 'block';\r\n        this.setContent(itemHolders[2], this.currIndex + 1);\r\n      }\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    if (this.mainScroll.itemHolders[1]) {\r\n      this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    }\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    return clamp(index, 0, numSlides - 1);\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.appendHeavy();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide?.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide?.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this._listeners = {};\r\n\r\n    if (this.scrollWrap) {\r\n      this.scrollWrap.ontouchmove = null;\r\n      this.scrollWrap.ontouchend = null;\r\n    }\r\n\r\n    this.element?.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.destroy();\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = (this.currSlide?.index ?? 0) - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide?.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = undefined;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  /** @returns {Point} */\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    if (this.bg) {\r\n      this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element?.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp', 'div');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', 'div', this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\r\n    this.container = createElement('pswp__container', 'div', this.scrollWrap);\r\n\r\n    // aria pattern: carousel\r\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\r\n    this.container.setAttribute('aria-live', 'off');\r\n    this.container.setAttribute('id', 'pswp__items');\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PreparedPhotoSwipeOptions} */\r\n    return {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n","/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  /** @type {Bounds | undefined} */\r\n  let thumbBounds;\r\n  /** @type {HTMLElement | null | undefined} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : /** @type {HTMLElement | null} */ (element.querySelector(thumbSelector));\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w || 0,\r\n        itemData.height || itemData.h || 0\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n"],"names":["ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","arguments","length","forEach","obj","key","value","toPropertyKey","defineProperty","configurable","writable","getOwnPropertyDescriptors","defineProperties","createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","concat","setTransform","style","transform","defaultCSSEasing","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","LOAD_STATE","isSafari","navigator","vendor","match","supportsPassive","window","addEventListener","get","DOMEvents","_classCallCheck","this","_pool","_createClass","target","type","listener","passive","_toggleListener","_this","poolItem","unbind","skipPool","_this2","methodName","split","eType","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","Number","getPanAreaSize","PanBounds","slide","currZoomLevel","center","_updateAxis","dispatch","reset","axis","elSize","data","panAreaSize","panOffset","ZoomLevel","elementSize","fit","fill","vFill","initial","secondary","maxWidth","maxHeight","hRatio","vRatio","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","optionPrefix","optionName","optionValue","_parseZoomLevelOption","Slide","isActive","currIndex","currentResolution","pan","isFirstSlide","opener","isOpen","content","contentLoader","getContentBySlide","container","holderElement","heavyAppended","bounds","prevDisplayedWidth","prevDisplayedHeight","activate","deactivate","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","mainScroll","isShifted","defaultPrevented","append","hasSlide","remove","update","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","_this$content$placeho","placeholder","element","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","_this3","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","zoomTo","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","correctPan","panX","panY","Boolean","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","stopAll","_this$gestures","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","velocity","_this$pswp4","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","_this4","panPos","restoreBgOpacity","projectedPosition","initialVelocity","decelerationRate","project","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","start","end","onUpdate","pos","animationProgressRatio","floor","_this$gestures2","_this$pswp5","delta","newMainScrollX","isPannable","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","_this$pswp$currSlide$","_this$pswp$currSlide","potentialPan","customFriction","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_wasOverFitZoomLevel","_startZoomLevel","_this$gestures3","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","actionName","_this$gestures$pswp$e","actionFullName","toggleZoom","clickToCloseNonZoomable","toggle","call","Gestures","_this5","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","maxTouchPoints","_intervalTime","_velocityCalculated","isDragging","isZooming","raf","_tapTimer","drag","tapHandler","on","events","add","scrollWrap","_onClick","bind","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","_clearTapTimer","preventDefault","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","Date","_updateVelocity","_finishTap","change","_updatePrevPoints","requestAnimationFrame","time","_getVelocity","_this6","indexOf","tapDelay","doubleTapAction","doubleTap","setTimeout","tap","click","clearTimeout","displacement","cancelAnimationFrame","applyFilters","pointerEvent","pointerIndex","findIndex","ongoingPointer","pointerId","splice","_convertEventPosToPoint","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MainScroll","slideWidth","_currPositionIndex","_prevPositionIndex","_containerShiftIndex","itemHolders","resizeSlides","_this7","newSlideWidth","spacing","slideWidthChanged","itemHolder","resize","i","setAttribute","display","getNumItems","animate","velocityX","_this8","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","_this$itemHolders$","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","resetPosition","setIsActive","updateLazy","dragging","newSlideIndexOffset","KeyboardKeyCodesMap","Escape","z","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Tab","getKeyboardEventKey","isKeySupported","Keyboard","_this9","_wasFocused","trapFocus","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","focus","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","keydownAction","isForward","keyCode","escKey","arrowKeys","template","CSSAnimation","props","_props$prop","_this10","_props$onFinish","onFinish","_props$duration","_props$easing","_target","_onComplete","_finished","_onTransitionEnd","_helperTimeout","_finalizeAnimation","removeEventListener","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","deltaPosition","deltaTime","coeff","naturalDumpingPow","pow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","_this11","_raf","_props$onFinish2","easer","prevTime","animationLoop","easeFrame","Animations","activeAnimations","_start","isSpring","_this12","animation","stop","destroy","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","UIElement","_container","elementHTML","html","isButton","toLowerCase","title","ariaLabel","ariaText","innerHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","addElementHTML","onInit","onClick","onclick","appendTo","topBar","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","setIndicatorVisibility","visible","updatePreloaderVisibility","_pswp$currSlide","isLoading","_pswp$currSlide2","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","isRegistered","uiElementsData","items","_lastUpdatedZoomLevel","_this13","sort","a","b","uiElementData","registerElement","_pswp$element","_onZoomPanUpdate","elementData","_this$pswp6","isClosing","currZoomLevelDiff","imageClickAction","PhotoSwipeEvent","details","assign","Eventable","_listeners","_filters","fn","_this$_filters$name","_this$_filters$name2","_this$pswp","priority","f1","f2","addFilter","removeFilter","_this$_filters$name3","_this14","_len","args","Array","_key","_this$_listeners$name","_this$pswp2","_this$pswp3","off","_this$_listeners$name2","_this15","Placeholder","imageSrc","imgEl","decoding","alt","src","_this$element","parentNode","Content","instance","displayedImageWidth","displayedImageHeight","isAttached","isDecoding","state","_this16","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","isImageContent","loadImage","_this$data$src","_this$data$alt","_this17","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","removePlaceholder","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","_this$instance$option","_this$instance$option2","errorMsgEl","errorMsg","_this18","supportsDecode","decode","catch","finally","appendImage","lazyLoadData","zoomLevel","createContentFromData","lazyLoad","ceil","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","initialIndex","getContentByIndex","getItemData","lazyLoadSlide","addToCache","setSlide","removeByIndex","indexToRemove","item","find","PhotoSwipeBase","_Eventable","_inherits","_super","_createSuper","_this$options","numItems","dataSource","_getGalleryDOMElements","gallery","_this$options2","dataSourceItem","isArray","Element","_domElementToItemData","galleryElement","_this$options3","_this$options4","children","childSelector","option","legacySelector","parent","elements","NodeList","from","selector","querySelectorAll","getElementsFromOption","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","_thumbnailEl$getAttri","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","MIN_OPACITY","Opener","isClosed","isOpening","_duration","_useAnimation","_croppedZoom","_animateRootOpacity","_animateBgOpacity","_placeholder","_opacityElement","_cropContainer1","_cropContainer2","_thumbBounds","_prepareOpen","_this19","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","showAnimationDuration","_options$showHideOpac","showHideAnimationType","showHideOpacity","_initialThumbBounds","getThumbBounds","getPlaceholderElement","_animateZoom","bg","opacity","innerRect","overflow","_setClosedStateZoomPan","willChange","_this20","Promise","resolve","img","decoded","isDelaying","reject","_initiate","_this$pswp$element","_this$pswp$element2","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","_this21","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","_PhotoSwipeBase","_super2","_this22","_prepareOptions","_prevViewportSize","isDestroying","hasMouse","_initialItemData","_assertThisInitialized","keyboard","_this23","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_handlePageResize","_updatePageScrollOffset","open","_itemHolder$slide","goTo","_this$currSlide4","_this$currSlide","_this$currSlide2","removeAll","_itemHolder$slide2","slideIndex","_this24","_this$currSlide$index","_this$currSlide3","_itemHolder$slide3","potentialHolderIndex","holder","matchMedia","matches","_this$element2","_this25","test","userAgent","setScrollOffset","appendHolders","init","body","thumbBounds","thumbnail","thumbSelector","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","getCroppedBoundsByElement","getBoundsByElement","_objectSpread"],"sourceRoot":""}